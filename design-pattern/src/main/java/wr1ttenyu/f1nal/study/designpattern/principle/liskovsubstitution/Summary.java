package wr1ttenyu.f1nal.study.designpattern.principle.liskovsubstitution;

/**
 * OO中的继承性的思考和说明：
 * 1. 继承包含这样一层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，
 *  虽然它不强制要求所有的子类必须遵循这些契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏
 * 2. 继承在给程序设计带来便利的同时，也带来了弊端。比如使用继承会给程序带来侵入性，程序的可移植性降低，
 *  增加对象间的耦合性，如果一个类被其他的类所继承，则当需要修改这个类的时候，必须考虑到所有的子类，
 *  并且父类修改后，所有涉及到子类的功能都有可能产生故障
 * 3. 问题提出：在编程中，如何正确的使用继承？ ======》 @@里氏替换原则@@
 *
 * @@里氏替换原则@@ 基本介绍
 * 1. Liskov Substitution Principle 由 Liskov 女士提出
 * 2. 如果对每个类型为T1的对象O1，都有类型为T2的对象O2，使得以T1定义的所有程序P在所有的对象O1都替换成O2时，
 *  程序P的行为没有发生变化，那么类型T2是类型T1的子类型。简而言之就是，所有引用基类的地方都可以使用其子类透明的进行替代。
 * 3. 在使用继承时，遵循历史替换原则，在子类中尽量不要重写父类的方法
 * 4. 历史替换原则告诉我们，继承实际上让两个类耦合性增强了，在适当的情况下，可以通过聚合、组合、依赖来解决问题
 *
 */
interface Summary {
}
