package wr1ttenyu.f1nal.study.designpattern.pattern23.iterator;

/**
 * 迭代器模式基本介绍
 * 1. 迭代器模式是常用的设计模式，属于行为型模式
 * 2. 如果我们的集合元素是用不同的方式实现的，有数组，还有java的集合类，或者还有其他方式，
 *      当客户端要遍历这些集合的时候就要使用多种遍历方式，而且还会暴露元素的内部结构，可以考虑使用迭代器模式
 * 3. 迭代器模式，提供一种遍历集合元素的统一接口，用一致的方法遍历集合元素，不需要知道集合对象的底层表示，
 *      即不暴露其内部的结构
 *
 * 迭代器模式的注意事项和细节
 * 优点
 * 1. 提供一个统一的方法遍历对象，客户不用再考虑聚合的类型，使用一种方法就可以遍历对象了。
 * 2. 隐藏了聚合的内部结构，客户端要遍历聚合对象的时候只能取到迭代器，而不会知道聚合的具体结构。
 * 3. 提供了一种设计思想，就是一个类应该只有一个引起变化的原因（叫做单一职责原则）。在聚合类中，我们把
 *      迭代器分开，就是要把 管理对象集合 和 遍历对象集合的职责分开，这样一来集合改变的话，只影响到聚合对象。
 *      而如果遍历方式改变的话，只影响到了迭代器。
 * 4. 应用场景：当要展示一组相似对象，或者遍历一组相同对象的时候，适合使用迭代器模式
 * 缺点
 * 1. 每个聚合对象都要一个迭代器，会生成多个迭代器不好管理类
 *
 */
public class Summary {
}
