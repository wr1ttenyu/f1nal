package wr1ttenyu.f1nal.study.designpattern.pattern23.decorator;

/**
 * 星巴克咖啡订单项目（咖啡馆） ：
 * 1) 咖啡种类/单品咖啡： Espresso(意大利浓咖啡)、 ShortBlack、 LongBlack(美式咖啡)、 Decaf(无因咖啡)
 * 2) 调料： Milk、 Soy(豆浆)、 Chocolate
 * 3) 要求在扩展新的咖啡种类时， 具有良好的扩展性、 改动方便、 维护方便
 * 4) 使用 OO 的来计算不同种类咖啡的费用: 客户可以点单品咖啡， 也可以单品咖啡+调料组合。
 *
 * 方式1：直接的类组合 Decorator1.puml
 * 1. 会造成类爆炸
 *
 * 方式2：将调料类的饮品 聚合到 {@link Drink} 类中
 * 1. 不符合开闭原则  如果增加新的饮品需要修改 {@link Drink}
 *
 * 方式3：装饰者模式
 * 1. 通过将饮品聚合到调味品中的方式，避免了类爆炸
 * 2. 同时可以动态的把调味品中的功能增加到饮品中
 *
 * 装饰者模式定义
 * 1) 装饰者模式：动态的将新功能附加到对象上。在对象功能扩展方面，它比继承更有弹性，装饰者模式也体现了开闭原则(ocp)
 *
 * 装饰者模式在jdk中的应用： JdkDecoratorApply.puml
 *
 * 装饰者和桥接模式的区别
 * 1. 装饰者模式意在扩展被装饰者的功能
 * 2. 桥接模式更注重于将原本通过继承的方式实现功能扩展的类，试图拆分成两个不同的维度，通过聚合的方式来实现扩展
 *      其好处是通过依赖维度的抽象,两个维度可以独立扩展,不受影响。
 *      也就是说桥接模式除了要拆分出不同的维度，同时还需要将两个维度都抽象出来
 */
public class Summary {
}
