@startuml

class EventObject
abstract class ApplicationEvent {
    +ApplicationEvent(source: Object)
}
note left:<size:9>ApplicationEvent继承自jdk的EventObject,\n<size:9>所有的事件都需要继承ApplicationEvent,并且通过source得到事件源.\n<size:9>该类的实现类ApplicationContextEvent表示ApplicaitonContext的容器事件.

interface EventListener
interface ApplicationListener {
    +onApplicationEvent(event:<E extends ApplicationEvent>): void
}
note left:<size:9>ApplicationListener继承自jdk的EventListener,\n<size:9>所有的监听器都要实现这个接口,这个接口只有一个onApplicationEvent()方法,\n<size:9>该方法接受一个ApplicationEvent或其子类对象作为参数,在方法体中,\n<size:9>可以通过不同对Event类的判断来进行相应的处理.\n<size:9>当事件触发时所有的监听器都会收到消息,如果你需要对监听器的接收顺序有要求,\n<size:9>可是实现该接口的一个实现SmartApplicationListener,通过这个接口可以指定监听器接收事件的顺序.

interface ApplicationEventMulticaster {
    	+addApplicationListener(ApplicationListener<?> listener): void
    	+addApplicationListenerBean(String listenerBeanName): void
    	+removeApplicationListener(ApplicationListener<?> listener): void
    	+removeApplicationListenerBean(String listenerBeanName): void
    	+removeAllListeners(): void
    	+multicastEvent(ApplicationEvent event): void
    	+multicastEvent(ApplicationEvent event, @Nullable ResolvableType eventType): void
}

abstract class AbstractApplicationEventMulticaster {
    -applicationListeners:Set<ApplicationListener<?>> = new LinkedHashSet<>()
}
note left:<size:9>属于事件广播器,它的作用是把Applicationcontext发布的Event广播给所有的监听器.\n<size:9>在AbstractApplicationcontext中有一个applicationEventMulticaster的成员变量,提供了监听器Listener的注册方法.

abstract class AbstractApplicationContext {
    -applicationEventMulticaster: ApplicationEventMulticaster
    +publishEvent(event: ApplicationEvent): void
    #initApplicationEventMulticaster(): void
    +refresh(): void
    #registerListeners(): void
}
note left:<size:9>我们常用的ApplicationContext都继承了AbstractApplicationContext,\n<size:9>像我们平时常见的ClassPathXmlApplicationContext、XmlWebApplicationContex也都是继承了它,\n<size:9>AbstractApplicationcontext是ApplicationContext接口的抽象实现类,在该类中实现了publishEvent方法

interface ApplicationEventPublisher {
    +publishEvent(event: ApplicationEvent): void
}

ApplicationListener ..> ApplicationEvent
ApplicationEvent --|> EventObject
ApplicationListener --|> EventListener

ApplicationEventMulticaster ..> ApplicationEvent
ApplicationEventMulticaster ..> ApplicationListener

AbstractApplicationEventMulticaster ..|> ApplicationEventMulticaster

AbstractApplicationContext o.. AbstractApplicationEventMulticaster
AbstractApplicationContext ..> ApplicationEvent

ConfigurableApplicationContext <|.. AbstractApplicationContext
ApplicationContext <|.. ConfigurableApplicationContext

ApplicationEventPublisher <|-- ApplicationContext
note left:<size:9>事件机制的实现需要三个部分,事件源,事件,事件监听器,在上面介绍的ApplicationEvent就相当于事件,\n<size:9>ApplicationListener相当于事件监听器,这里的事件源说的就是applicaitonContext.\n<size:9>ApplicationContext是spring中的全局容器,翻译过来是"应用上下文"的意思,\n<size:9>它用来负责读取bean的配置文档,管理bean的加载,维护bean之间的依赖关系,\n<size:9>可以说是负责bean的整个生命周期,再通俗一点就是我们平时所说的IOC容器.\n<size:9>Application作为一个事件源,需要显示的调用publishEvent方法,传入一个ApplicationEvent的实现类对象作为参数,\n<size:9>每当ApplicationContext发布ApplicationEvent时,所有的ApplicationListener就会被自动的触发.\n<size:9>ApplicationContext接口实现了ApplicationEventPublisher接口,后者有一个很重要的方法：\n<size:9>publishEvent(event:ApplicationEvent):void

@enduml