package wr1ttenyu.f1nal.study.designpattern.pattern23.builder;

/**
 * 建造者模式基本介绍：
 * 1. 建造者模式（Builder Pattern)又叫生成器模式，是一种对象构建模式。他可以将复杂对象的建造过程抽象出
 *      来(抽象类别)，使这个抽象过程的不同实现类可以构造出不同表现（属性）的对象。
 * 2. 建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建他们，
 *      用户不需要知道内部的具体构建细节。
 *
 * 建造者模式的四个角色：
 * 1. Product(产品角色)：一个具体的产品对象
 * 2. AbstractBuilder(抽象建造者)：创建一个Product对象的各个部件指定的 接口/抽象类
 * 3. ConcreteBuilder(具体建造者)：实现接口，构建和装配各个部件
 * 4. Director(指挥者)：构建一个使用Builder接口的对象。他主要是用于创建一个复杂的对象。它主要有两个作用：
 *      一是：隔离了调用方与对象的生产过程，二是：负责控制产品对象的生产过程。
 *
 * 建造者模式的注意事项和细节
 * 1. 客户端（使用程序）不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，
 *      使得相同的创建过程可以创建不同的产品对象
 * 2. 每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或者增加新的具体建造者，
 *      用户使用不同的具体建造者即可得到不同的产品对象
 * 3. 可以更加精细的控制产品的建造过程。将复杂的产品的创建步骤分解在不同的方法中，是的创建的过程更加清晰，
 *      也更方便使用程序来控制创建过程
 * 4. 增加新的具体建造者无须修改原有的类库代码，指挥者类针对抽象建造者类编程，系统扩展方便，符合“ocp原则”
 * 5. 建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合
 *      使用建造者模式，因此其使用范围受到一定的限制
 * 6. 如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变的很庞大，
 *      因此在这种情况下，需要考虑是否选择建造者模式
 * 7. 抽象工厂模式 VS 建造者模式
 *      抽象工厂模式实现对产品家族的创建，一个产品家族是这样一系列产品：具有不同分类维度的产品组合。
 *      采用抽象工厂模式不需要关系产品构建过程，只关系产品由什么工厂生产即可。而建造者模式则是要求按照指定
 *      的蓝图建造产品，它的主要目的是通过组装零配件来产生一个新产品
 */
public class Summary {

    /**
     * 建造者模式在JDK中的应用 {@link StringBuilder}
     * 详见StringBuilderAnalyze.puml类图分析
     */
    public static void main(String[] args) {
        StringBuilder stringBuilder = new StringBuilder("wr1ttenyu");
        System.out.println(stringBuilder);
    }
}
